using CSV, DataFrames, DelimitedFiles

N = 7
test_values = zeros(ComplexF64, (2 * N - 1)^2)
l = length(test_values)
distx = 0.0007## distance from centre in real
disty = 0.0007# distance from centre in imaginary
cent_im = 0.0600im
cent_r = 0.0780

## snake like structure of test_values will allow for faster convergence when recycling Ïˆ (because you don't jump the entire distx after the loop)
for i in 1:1:(2*N-1)
    if div(i, 2) == 1
        for j in 1:1:(2*N-1)
            if i < N + 1
                if j < N + 1
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(-distx, 0.00, N)[i]) .+ cent_r + 1im * LinRange(-disty, 0.00, N)[j] .+ cent_im
                else
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(-distx, 0.00, N)[i]) .+ cent_r + 1im * LinRange(disty / (N - 1), disty + disty / (N - 1), N)[j-N] .+ cent_im
                end
            else
                if j < N + 1
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(distx / (N - 1), distx + distx / (N - 1), N)[i-N]) .+ cent_r + 1im * LinRange(-disty, 0.00, N)[j] .+ cent_im
                else
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(distx / (N - 1), distx + distx / (N - 1), N)[i-N]) .+ cent_r + 1im * LinRange(disty / (N - 1), disty + disty / (N - 1), N)[j-N] .+ cent_im
                end
            end
        end
    else
        for j in (2*N-1):-1:1
            if i < N + 1
                if j < N + 1
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(-distx, 0.00, N)[i]) .+ cent_r + 1im * LinRange(-disty, 0.00, N)[j] .+ cent_im
                else
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(-distx, 0.00, N)[i]) .+ cent_r + 1im * LinRange(disty / (N - 1), disty + disty / (N - 1), N)[j-N] .+ cent_im
                end
            else
                if j < N + 1
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(distx / (N - 1), distx + distx / (N - 1), N)[i-N]) .+ cent_r + 1im * LinRange(-disty, 0.00, N)[j] .+ cent_im
                else
                    test_values[i+(j-1)*(2*N-1)] = (LinRange(distx / (N - 1), distx + distx / (N - 1), N)[i-N]) .+ cent_r + 1im * LinRange(disty / (N - 1), disty + disty / (N - 1), N)[j-N] .+ cent_im
                end
            end
        end
    end
end
Ls = [22,23]
W = (2 * N - 1)^2
M = Matrix{Any}(undef, length(Ls) * W, 3)
# writedlm("test_values.csv", test_values)
reals = round.(real(test_values); digits=6)
imags = round.(imag(test_values); digits=6)

for (index, L) in enumerate(Ls)
    M[1+(index-1)*W:1:index*W, 1] = reals
    M[1+(index-1)*W:1:index*W, 2] = imags
    M[1+(index-1)*W:1:index*W, 3] = Int.([L for _ in 1:1:W])
end
M
writedlm("HPC stuff/CCFTlambda/test_values.csv", M, ',')



############

V = ComplexF64[0.0 + 0.0im, 0.013141666666666663 + 0.0im, 0.026283333333333325 + 0.0im, 0.039425 + 0.0im, 0.052566666666666664 + 0.0im, 0.06570833333333334 + 0.0im, 0.07885 + 0.0im, 0.09199166666666667 + 0.0im, 0.10776166666666667 + 0.0im, 0.12353166666666666 + 0.0im, 0.13930166666666666 + 0.0im, 0.15507166666666666 + 0.0im, 0.17084166666666667 + 0.0im, 0.0 + 0.010041666666666664im, 0.013141666666666663 + 0.010041666666666664im, 0.026283333333333325 + 0.010041666666666664im, 0.039425 + 0.010041666666666664im, 0.052566666666666664 + 0.010041666666666664im, 0.06570833333333334 + 0.010041666666666664im, 0.07885 + 0.010041666666666664im, 0.09199166666666667 + 0.010041666666666664im, 0.10776166666666667 + 0.010041666666666664im, 0.12353166666666666 + 0.010041666666666664im, 0.13930166666666666 + 0.010041666666666664im, 0.15507166666666666 + 0.010041666666666664im, 0.17084166666666667 + 0.010041666666666664im, 0.0 + 0.020083333333333328im, 0.013141666666666663 + 0.020083333333333328im, 0.026283333333333325 + 0.020083333333333328im, 0.039425 + 0.020083333333333328im, 0.052566666666666664 + 0.020083333333333328im, 0.06570833333333334 + 0.020083333333333328im, 0.07885 + 0.020083333333333328im, 0.09199166666666667 + 0.020083333333333328im, 0.10776166666666667 + 0.020083333333333328im, 0.12353166666666666 + 0.020083333333333328im, 0.13930166666666666 + 0.020083333333333328im, 0.15507166666666666 + 0.020083333333333328im, 0.17084166666666667 + 0.020083333333333328im, 0.0 + 0.030125im, 0.013141666666666663 + 0.030125im, 0.026283333333333325 + 0.030125im, 0.039425 + 0.030125im, 0.052566666666666664 + 0.030125im, 0.06570833333333334 + 0.030125im, 0.07885 + 0.030125im, 0.09199166666666667 + 0.030125im, 0.10776166666666667 + 0.030125im, 0.12353166666666666 + 0.030125im, 0.13930166666666666 + 0.030125im, 0.15507166666666666 + 0.030125im, 0.17084166666666667 + 0.030125im, 0.0 + 0.04016666666666666im, 0.013141666666666663 + 0.04016666666666666im, 0.026283333333333325 + 0.04016666666666666im, 0.039425 + 0.04016666666666666im, 0.052566666666666664 + 0.04016666666666666im, 0.06570833333333334 + 0.04016666666666666im, 0.07885 + 0.04016666666666666im, 0.09199166666666667 + 0.04016666666666666im, 0.10776166666666667 + 0.04016666666666666im, 0.12353166666666666 + 0.04016666666666666im, 0.13930166666666666 + 0.04016666666666666im, 0.15507166666666666 + 0.04016666666666666im, 0.17084166666666667 + 0.04016666666666666im, 0.0 + 0.050208333333333334im, 0.013141666666666663 + 0.050208333333333334im, 0.026283333333333325 + 0.050208333333333334im, 0.039425 + 0.050208333333333334im, 0.052566666666666664 + 0.050208333333333334im, 0.06570833333333334 + 0.050208333333333334im, 0.07885 + 0.050208333333333334im, 0.09199166666666667 + 0.050208333333333334im, 0.10776166666666667 + 0.050208333333333334im, 0.12353166666666666 + 0.050208333333333334im, 0.13930166666666666 + 0.050208333333333334im, 0.15507166666666666 + 0.050208333333333334im, 0.17084166666666667 + 0.050208333333333334im, 0.0 + 0.06025im, 0.013141666666666663 + 0.06025im, 0.026283333333333325 + 0.06025im, 0.039425 + 0.06025im, 0.052566666666666664 + 0.06025im, 0.06570833333333334 + 0.06025im, 0.07885 + 0.06025im, 0.09199166666666667 + 0.06025im, 0.10776166666666667 + 0.06025im, 0.12353166666666666 + 0.06025im, 0.13930166666666666 + 0.06025im, 0.15507166666666666 + 0.06025im, 0.17084166666666667 + 0.06025im, 0.0 + 0.07029166666666667im, 0.013141666666666663 + 0.07029166666666667im, 0.026283333333333325 + 0.07029166666666667im, 0.039425 + 0.07029166666666667im, 0.052566666666666664 + 0.07029166666666667im, 0.06570833333333334 + 0.07029166666666667im, 0.07885 + 0.07029166666666667im, 0.09199166666666667 + 0.07029166666666667im, 0.10776166666666667 + 0.07029166666666667im, 0.12353166666666666 + 0.07029166666666667im, 0.13930166666666666 + 0.07029166666666667im, 0.15507166666666666 + 0.07029166666666667im, 0.17084166666666667 + 0.07029166666666667im, 0.0 + 0.08234166666666667im, 0.013141666666666663 + 0.08234166666666667im, 0.026283333333333325 + 0.08234166666666667im, 0.039425 + 0.08234166666666667im, 0.052566666666666664 + 0.08234166666666667im, 0.06570833333333334 + 0.08234166666666667im, 0.07885 + 0.08234166666666667im, 0.09199166666666667 + 0.08234166666666667im, 0.10776166666666667 + 0.08234166666666667im, 0.12353166666666666 + 0.08234166666666667im, 0.13930166666666666 + 0.08234166666666667im, 0.15507166666666666 + 0.08234166666666667im, 0.17084166666666667 + 0.08234166666666667im, 0.0 + 0.09439166666666667im, 0.013141666666666663 + 0.09439166666666667im, 0.026283333333333325 + 0.09439166666666667im, 0.039425 + 0.09439166666666667im, 0.052566666666666664 + 0.09439166666666667im, 0.06570833333333334 + 0.09439166666666667im, 0.07885 + 0.09439166666666667im, 0.09199166666666667 + 0.09439166666666667im, 0.10776166666666667 + 0.09439166666666667im, 0.12353166666666666 + 0.09439166666666667im, 0.13930166666666666 + 0.09439166666666667im, 0.15507166666666666 + 0.09439166666666667im, 0.17084166666666667 + 0.09439166666666667im, 0.0 + 0.10644166666666666im, 0.013141666666666663 + 0.10644166666666666im, 0.026283333333333325 + 0.10644166666666666im, 0.039425 + 0.10644166666666666im, 0.052566666666666664 + 0.10644166666666666im, 0.06570833333333334 + 0.10644166666666666im, 0.07885 + 0.10644166666666666im, 0.09199166666666667 + 0.10644166666666666im, 0.10776166666666667 + 0.10644166666666666im, 0.12353166666666666 + 0.10644166666666666im, 0.13930166666666666 + 0.10644166666666666im, 0.15507166666666666 + 0.10644166666666666im, 0.17084166666666667 + 0.10644166666666666im, 0.0 + 0.11849166666666666im, 0.013141666666666663 + 0.11849166666666666im, 0.026283333333333325 + 0.11849166666666666im, 0.039425 + 0.11849166666666666im, 0.052566666666666664 + 0.11849166666666666im, 0.06570833333333334 + 0.11849166666666666im, 0.07885 + 0.11849166666666666im, 0.09199166666666667 + 0.11849166666666666im, 0.10776166666666667 + 0.11849166666666666im, 0.12353166666666666 + 0.11849166666666666im, 0.13930166666666666 + 0.11849166666666666im, 0.15507166666666666 + 0.11849166666666666im, 0.17084166666666667 + 0.11849166666666666im, 0.0 + 0.13054166666666667im, 0.013141666666666663 + 0.13054166666666667im, 0.026283333333333325 + 0.13054166666666667im, 0.039425 + 0.13054166666666667im, 0.052566666666666664 + 0.13054166666666667im, 0.06570833333333334 + 0.13054166666666667im, 0.07885 + 0.13054166666666667im, 0.09199166666666667 + 0.13054166666666667im, 0.10776166666666667 + 0.13054166666666667im, 0.12353166666666666 + 0.13054166666666667im, 0.13930166666666666 + 0.13054166666666667im, 0.15507166666666666 + 0.13054166666666667im, 0.17084166666666667 + 0.13054166666666667im, 0.0 - 0.010041666666666664im, 0.013141666666666663 - 0.010041666666666664im, 0.026283333333333325 - 0.010041666666666664im, 0.039425 - 0.010041666666666664im, 0.052566666666666664 - 0.010041666666666664im, 0.06570833333333334 - 0.010041666666666664im, 0.07885 - 0.010041666666666664im, 0.09199166666666667 - 0.010041666666666664im, 0.10776166666666667 - 0.010041666666666664im, 0.12353166666666666 - 0.010041666666666664im, 0.13930166666666666 - 0.010041666666666664im, 0.15507166666666666 - 0.010041666666666664im, 0.17084166666666667 - 0.010041666666666664im, 0.0 - 0.020083333333333328im, 0.013141666666666663 - 0.020083333333333328im, 0.026283333333333325 - 0.020083333333333328im, 0.039425 - 0.020083333333333328im, 0.052566666666666664 - 0.020083333333333328im, 0.06570833333333334 - 0.020083333333333328im, 0.07885 - 0.020083333333333328im, 0.09199166666666667 - 0.020083333333333328im, 0.10776166666666667 - 0.020083333333333328im, 0.12353166666666666 - 0.020083333333333328im, 0.13930166666666666 - 0.020083333333333328im, 0.15507166666666666 - 0.020083333333333328im, 0.17084166666666667 - 0.020083333333333328im, 0.0 - 0.030125im, 0.013141666666666663 - 0.030125im, 0.026283333333333325 - 0.030125im, 0.039425 - 0.030125im, 0.052566666666666664 - 0.030125im, 0.06570833333333334 - 0.030125im, 0.07885 - 0.030125im, 0.09199166666666667 - 0.030125im, 0.10776166666666667 - 0.030125im, 0.12353166666666666 - 0.030125im, 0.13930166666666666 - 0.030125im, 0.15507166666666666 - 0.030125im, 0.17084166666666667 - 0.030125im, 0.0 - 0.04016666666666666im, 0.013141666666666663 - 0.04016666666666666im, 0.026283333333333325 - 0.04016666666666666im, 0.039425 - 0.04016666666666666im, 0.052566666666666664 - 0.04016666666666666im, 0.06570833333333334 - 0.04016666666666666im, 0.07885 - 0.04016666666666666im, 0.09199166666666667 - 0.04016666666666666im, 0.10776166666666667 - 0.04016666666666666im, 0.12353166666666666 - 0.04016666666666666im, 0.13930166666666666 - 0.04016666666666666im, 0.15507166666666666 - 0.04016666666666666im, 0.17084166666666667 - 0.04016666666666666im, 0.0 - 0.050208333333333334im, 0.013141666666666663 - 0.050208333333333334im, 0.026283333333333325 - 0.050208333333333334im, 0.039425 - 0.050208333333333334im, 0.052566666666666664 - 0.050208333333333334im, 0.06570833333333334 - 0.050208333333333334im, 0.07885 - 0.050208333333333334im, 0.09199166666666667 - 0.050208333333333334im, 0.10776166666666667 - 0.050208333333333334im, 0.12353166666666666 - 0.050208333333333334im, 0.13930166666666666 - 0.050208333333333334im, 0.15507166666666666 - 0.050208333333333334im, 0.17084166666666667 - 0.050208333333333334im, 0.0 - 0.06025im, 0.013141666666666663 - 0.06025im, 0.026283333333333325 - 0.06025im, 0.039425 - 0.06025im, 0.052566666666666664 - 0.06025im, 0.06570833333333334 - 0.06025im, 0.07885 - 0.06025im, 0.09199166666666667 - 0.06025im, 0.10776166666666667 - 0.06025im, 0.12353166666666666 - 0.06025im, 0.13930166666666666 - 0.06025im, 0.15507166666666666 - 0.06025im, 0.17084166666666667 - 0.06025im, 0.0 - 0.07029166666666667im, 0.013141666666666663 - 0.07029166666666667im, 0.026283333333333325 - 0.07029166666666667im, 0.039425 - 0.07029166666666667im, 0.052566666666666664 - 0.07029166666666667im, 0.06570833333333334 - 0.07029166666666667im, 0.07885 - 0.07029166666666667im, 0.09199166666666667 - 0.07029166666666667im, 0.10776166666666667 - 0.07029166666666667im, 0.12353166666666666 - 0.07029166666666667im, 0.13930166666666666 - 0.07029166666666667im, 0.15507166666666666 - 0.07029166666666667im, 0.17084166666666667 - 0.07029166666666667im, 0.0 - 0.08234166666666667im, 0.013141666666666663 - 0.08234166666666667im, 0.026283333333333325 - 0.08234166666666667im, 0.039425 - 0.08234166666666667im, 0.052566666666666664 - 0.08234166666666667im, 0.06570833333333334 - 0.08234166666666667im, 0.07885 - 0.08234166666666667im, 0.09199166666666667 - 0.08234166666666667im, 0.10776166666666667 - 0.08234166666666667im, 0.12353166666666666 - 0.08234166666666667im, 0.13930166666666666 - 0.08234166666666667im, 0.15507166666666666 - 0.08234166666666667im, 0.17084166666666667 - 0.08234166666666667im, 0.0 - 0.09439166666666667im, 0.013141666666666663 - 0.09439166666666667im, 0.026283333333333325 - 0.09439166666666667im, 0.039425 - 0.09439166666666667im, 0.052566666666666664 - 0.09439166666666667im, 0.06570833333333334 - 0.09439166666666667im, 0.07885 - 0.09439166666666667im, 0.09199166666666667 - 0.09439166666666667im, 0.10776166666666667 - 0.09439166666666667im, 0.12353166666666666 - 0.09439166666666667im, 0.13930166666666666 - 0.09439166666666667im, 0.15507166666666666 - 0.09439166666666667im, 0.17084166666666667 - 0.09439166666666667im, 0.0 - 0.10644166666666666im, 0.013141666666666663 - 0.10644166666666666im, 0.026283333333333325 - 0.10644166666666666im, 0.039425 - 0.10644166666666666im, 0.052566666666666664 - 0.10644166666666666im, 0.06570833333333334 - 0.10644166666666666im, 0.07885 - 0.10644166666666666im, 0.09199166666666667 - 0.10644166666666666im, 0.10776166666666667 - 0.10644166666666666im, 0.12353166666666666 - 0.10644166666666666im, 0.13930166666666666 - 0.10644166666666666im, 0.15507166666666666 - 0.10644166666666666im, 0.17084166666666667 - 0.10644166666666666im, 0.0 - 0.11849166666666666im, 0.013141666666666663 - 0.11849166666666666im, 0.026283333333333325 - 0.11849166666666666im, 0.039425 - 0.11849166666666666im, 0.052566666666666664 - 0.11849166666666666im, 0.06570833333333334 - 0.11849166666666666im, 0.07885 - 0.11849166666666666im, 0.09199166666666667 - 0.11849166666666666im, 0.10776166666666667 - 0.11849166666666666im, 0.12353166666666666 - 0.11849166666666666im, 0.13930166666666666 - 0.11849166666666666im, 0.15507166666666666 - 0.11849166666666666im, 0.17084166666666667 - 0.11849166666666666im, 0.0 - 0.13054166666666667im, 0.013141666666666663 - 0.13054166666666667im, 0.026283333333333325 - 0.13054166666666667im, 0.039425 - 0.13054166666666667im, 0.052566666666666664 - 0.13054166666666667im, 0.06570833333333334 - 0.13054166666666667im, 0.07885 - 0.13054166666666667im, 0.09199166666666667 - 0.13054166666666667im, 0.10776166666666667 - 0.13054166666666667im, 0.12353166666666666 - 0.13054166666666667im, 0.13930166666666666 - 0.13054166666666667im, 0.15507166666666666 - 0.13054166666666667im, 0.17084166666666667 - 0.13054166666666667im]

Ls = 10:2:14
M = Matrix{Any}(undef, length(Ls) * length(V), 3)
reals = round.(real(V); digits=8)
imags = round.(imag(V); digits=8)
for (index, L) in enumerate(Ls)
    M[1+(index-1)*length(V):1:index*length(V), 1] = reals
    M[1+(index-1)*length(V):1:index*length(V), 2] = imags
    M[1+(index-1)*length(V):1:index*length(V), 3] = Int.([L for _ in 1:1:length(V)])
end
using DelimitedFiles
writedlm("HPC stuff/CCFTlambda/big_test_values.csv", M, ',') #don't forget to add the header